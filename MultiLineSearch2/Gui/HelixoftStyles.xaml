<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:Helixoft.MultiLineSearch.Gui">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="VisualStudioStyles.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <!-- GridSplitter with three dots -->
    <Style TargetType="GridSplitter">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GridSplitter}">
                    <Border Height="7" Focusable="False" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition/>
                                <ColumnDefinition Width="auto"/>
                                <ColumnDefinition/>
                            </Grid.ColumnDefinitions>
                            <!-- Make dragable with mouse even for transparent background color -->
                            <Rectangle StrokeThickness="0" Grid.ColumnSpan="3"  Fill="#00000000" />
                            <!-- Background -->
                            <Rectangle StrokeThickness="0" Grid.ColumnSpan="3" Fill="{TemplateBinding Background}" />
                            <Ellipse Height="4" Width="4" Fill="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" Margin="2,1" HorizontalAlignment="Right"  />
                            <Ellipse Height="4" Width="4" Fill="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" Margin="2,1" Grid.Column="1"  />
                            <Ellipse Height="4" Width="4" Fill="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" Margin="2,1" Grid.Column="2" HorizontalAlignment="Left"  />
                            <!-- Focus Visual -->
                            <!--<Rectangle x:Name="FocusVisual" Stroke="#FF6DBDD1" StrokeThickness="1" Opacity="0" IsHitTestVisible="false" Grid.ColumnSpan="3"/>-->
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Expander with plus & minus -->
    <Style x:Key="ExpanderHeaderFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle Margin="0" SnapsToDevicePixels="true" 
                                   Stroke="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}"
                                   StrokeThickness="1" StrokeDashArray="1 2"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="ExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="False">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Border Name="Button" Width="16" Height="16" BorderBrush="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}" BorderThickness="1"  Margin="3">
                                <Path Name="ButtonIcon" Width="10" Height="10" RenderOptions.EdgeMode="Aliased" Stroke="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}" StrokeThickness="1" Data="M 5 1 L 5 9 M 1 5 L 9 5" HorizontalAlignment="Center" VerticalAlignment="Center" />
                            </Border>
                            
                            <ContentPresenter Grid.Column="1" HorizontalAlignment="Left" Margin="4,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center"/>
                        </Grid>
                    </Border>

                    
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                             <!--opened--> 
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="true" />
                                <Condition Property="IsMouseOver" Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Data" TargetName="ButtonIcon" Value="M 1 5 L 9 5"/>
                        </MultiTrigger>
                        <MultiTrigger>
                             <!--opened & hover--> 
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="true" />
                                <Condition Property="IsMouseOver" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Data" TargetName="ButtonIcon" Value="M 1 5 L 9 5"/>
                            <Setter Property="BorderBrush" TargetName="Button" Value="{DynamicResource {x:Static SystemColors.InactiveBorderBrushKey }}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                             <!--closed & hover--> 
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="false" />
                                <Condition Property="IsMouseOver" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Data" TargetName="ButtonIcon" Value="M 5 1 L 5 9 M 1 5 L 9 5"/>
                            <Setter Property="BorderBrush" TargetName="Button" Value="{DynamicResource {x:Static SystemColors.InactiveBorderBrushKey }}"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="PlusMinusExpander" TargetType="{x:Type Expander}" BasedOn="{StaticResource {x:Type Expander}}">
        <!--<Setter Property="Foreground" Value="#FFff0000"/>-->
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="3" SnapsToDevicePixels="true">
                        <DockPanel>
                            <ToggleButton x:Name="HeaderSite" 
                                          ContentTemplate="{TemplateBinding HeaderTemplate}" 
                                          ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" 
                                          Content="{TemplateBinding Header}" 
                                          DockPanel.Dock="Top" 
                                          Foreground="{TemplateBinding Foreground}" 
                                          FontWeight="{TemplateBinding FontWeight}"
                                          FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}" 
                                          FontStyle="{TemplateBinding FontStyle}" 
                                          FontStretch="{TemplateBinding FontStretch}" 
                                          FontSize="{TemplateBinding FontSize}"
                                          FontFamily="{TemplateBinding FontFamily}" 
                                          HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                          IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" 
                                          Margin="1" MinWidth="0" MinHeight="0" 
                                          Padding="{TemplateBinding Padding}" 
                                          Style="{StaticResource ExpanderDownHeaderStyle}" 
                                          VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <ContentPresenter x:Name="ExpandSite" 
                                              DockPanel.Dock="Bottom" 
                                              Focusable="false" 
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                              Margin="{TemplateBinding Padding}" 
                                              Visibility="Collapsed" 
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="true">
                            <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>