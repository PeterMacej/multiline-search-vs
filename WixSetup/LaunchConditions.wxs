<?xml version="1.0" encoding="UTF-8"?>
<Wix xmlns="http://schemas.microsoft.com/wix/2006/wi"
     xmlns:util="http://schemas.microsoft.com/wix/UtilExtension">
	<Fragment>
     
    <!--Test for .NET 2.0-->
    <!--not needed because we also check for VS 2005 and higher-->
    <!--
    <Condition Message='.NET Framework 2.0 must be installed prior to installation of this product.'>
      [<![CDATA[ MsiNetAssemblySupport >= "2.0.50727" ]]>
    </Condition>
    -->

    
    <!-- Properties to get the installation folders of Visual Studio 2005, 2008, 2010, 2012 or 2013.
           If the values can't be retrieved the properties will remain unset (with the FALSE value) and can be used 
           in boolean expressions later.
           The properties must be secure in order to the Repair, Change and Remove buttons of the maintenance mode to work correctly.
           As intended, only Standard (for VS2005) or Pro (for VS 2008+) and higher editions are detected here. Express editions
           have a different registry key: Software\Microsoft\VSWinExpress
      -->
    <Property Id="VS2005INSTALLATIONFOLDER" Secure="yes">
      <RegistrySearch Id="RS_VS2005InstallationFolderRegistrySearchId" Type="raw"
                      Root="HKLM" Key="SOFTWARE\Microsoft\VisualStudio\8.0" Name="InstallDir"></RegistrySearch>
    </Property>
    <Property Id="VS2008INSTALLATIONFOLDER" Secure="yes">
      <RegistrySearch Id="RS_VS2008InstallationFolderRegistrySearchId" Type="raw"
                      Root="HKLM" Key="SOFTWARE\Microsoft\VisualStudio\9.0" Name="InstallDir"></RegistrySearch>
    </Property>
    <Property Id="VS2010INSTALLATIONFOLDER" Secure="yes">
      <RegistrySearch Id="RS_VS2010InstallationFolderRegistrySearchId" Type="raw"
                      Root="HKLM" Key="SOFTWARE\Microsoft\VisualStudio\10.0" Name="InstallDir"></RegistrySearch>
    </Property>
    <Property Id="VS2012INSTALLATIONFOLDER" Secure="yes">
      <RegistrySearch Id="RS_VS2012InstallationFolderRegistrySearchId" Type="raw"
                      Root="HKLM" Key="SOFTWARE\Microsoft\VisualStudio\11.0" Name="InstallDir"></RegistrySearch>
    </Property>
    <Property Id="VS2013INSTALLATIONFOLDER" Secure="yes">
      <RegistrySearch Id="RS_VS2013InstallationFolderRegistrySearchId" Type="raw"
                      Root="HKLM" Key="SOFTWARE\Microsoft\VisualStudio\12.0" Name="InstallDir"></RegistrySearch>
    </Property>


    <!-- Check that some Visual Studio version is present when installing.
           The OR'ed Installed variable ensures that the condition is always true when uninstalling, because we don't
           need to check that Visual Studio is present when uninstalling.
      -->
    <Condition Message="!(loc.ERR_ProductRequiresVS)">
      Installed OR VS2005INSTALLATIONFOLDER OR VS2008INSTALLATIONFOLDER OR VS2010INSTALLATIONFOLDER OR VS2012INSTALLATIONFOLDER OR VS2013INSTALLATIONFOLDER
    </Condition>


    <!-- Check that VS is not running -->
    <!-- Set VS_RUNNING property to 1 if any devenv.exe process is running. Otherwise, this
    property is not set. This action is performed by standard custom action WixCloseApplications
    which needs to be scheduled before launch conditions. -->
    <util:CloseApplication Id="UCA_VSClose"
                       CloseMessage="no"
                       Target="devenv.exe"
                       Property="VS_RUNNING"
                       Description="Please close all running instances of Visual Studio."
                       ElevatedCloseMessage="no"
                       RebootPrompt="no" />
    <!--test if VS is running-->
    <Condition Message="!(loc.ERR_ProductRequiresVSclosed)">
      NOT VS_RUNNING
    </Condition>


    <!-- Admin rights are required for VS package installation (needed for devenv.exe /setup /nosetupvstemplates) -->
    <Condition Message="!(loc.ERR_ProductRequiresAdmin)">
      Privileged
    </Condition>

    <InstallExecuteSequence>
      <!--WixCloseApplications is a built in custom action that uses util:CloseApplication-->
      <Custom Action="WixCloseApplications" Before="LaunchConditions" />
    </InstallExecuteSequence>

    <InstallUISequence>
      <!--WixCloseApplications is a built in custom action that uses util:CloseApplication-->
      <Custom Action="WixCloseApplications" Before="LaunchConditions" />
    </InstallUISequence>

  </Fragment>
</Wix>